from collections import deque

#Undirected graph using an adjacency list
class Graph:

    def __init__(self, n):
        self.adj = {}
        for i in range(n):
            self.adj[i] = []

    def are_connected(self, node1, node2):
        return node2 in self.adj[node1]

    def adjacent_nodes(self, node):
        return self.adj[node]

    def add_node(self):
        self.adj[len(self.adj)] = []

    def add_edge(self, node1, node2):
        if node1 not in self.adj[node2]:
            self.adj[node1].append(node2)
            self.adj[node2].append(node1)

    def number_of_nodes(self):
        return len(self.adj)


#Breadth First Search
def BFS(G, node1, node2):
    Q = deque([node1])
    marked = {node1 : True}
    for node in G.adj:
        if node != node1:
            marked[node] = False
    while len(Q) != 0:
        current_node = Q.popleft()
        for node in G.adj[current_node]:
            if node == node2:
                return True
            if not marked[node]:
                Q.append(node)
                marked[node] = True
    return False


#Depth First Search
def DFS(G, node1, node2):
    S = [node1]
    marked = {}
    for node in G.adj:
        marked[node] = False
    while len(S) != 0:
        current_node = S.pop()
        if not marked[current_node]:
            marked[current_node] = True
            for node in G.adj[current_node]:
                if node == node2:
                    return True
                S.append(node)
    return False

def DFS2(G, node1, node2):
    vertex = node1
    path = [node1]
    visited = set()
    index = 0
    while len(path) != 0:
        if vertex not in visited:
            if vertex == node2:
                return path
            if graph.adj[vertex][index] not in visited:
                path.append(graph.adj[vertex][index])
                vertex = path[-1]
                index = 0
                visited.add(vertex)
            else:
                index += 1
                path.append(graph.adj[vertex][index])
                vertex = path[-1]



def dfs_paths(graph, start, goal):
    stack = [(start, [start])]
    visited = set()
    while stack:
        (vertex, path) = stack.pop()
        if vertex not in visited:
            if vertex == goal:
                return path
            visited.add(vertex)
            for neighbor in graph.adj[vertex]:
                stack.append((neighbor, path + [neighbor]))

def DFS3(graph, node):
    pred = {}
    for element in graph.adj:
        if DFS(graph, element, node) == True:
            pred[element] = graph.adj[element][0]
    pred.pop(node)
    return pred

def BFS3(graph, node):
    pred = {}
    for element in graph.adj:
        if BFS(graph, element, node) == True:
            pred[element] = graph.adj[element][0]
    pred.pop(node)
    return pred



def has_cycle(G: Graph) -> bool:
    sources = set(G.adj.keys())
    while len(sources) > 0:
        source = list(sources)[0]
        queue = deque([source])
        marked = {node: False for node in G.adj}
        marked[source] = True
        while len(queue) != 0:
            cur = queue.popleft()
            sources.remove(cur)
            for node in G.adj[cur]:
                if not marked[node]:
                    marked[node] = True
                    queue.append(node)
                elif node in queue:
                    return True
    return False

graph = Graph(7)
graph.add_edge(1,2)
graph.add_edge(1,3)
graph.add_edge(2,4)
graph.add_edge(3,4)
graph.add_edge(3,5)
graph.add_edge(4,5)
graph.add_edge(4,6)
graph2 = Graph(2)
graph.add_edge(0,1)
graph.add_edge(1,2)
print(has_cycle(graph))
print(has_cycle(graph2))
print(graph.adj)
print(DFS3(graph, 1))
print(BFS3(graph, 1))
print(has_cycle(graph))
